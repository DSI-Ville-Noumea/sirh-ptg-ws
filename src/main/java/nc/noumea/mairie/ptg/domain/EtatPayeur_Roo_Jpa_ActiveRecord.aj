// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nc.noumea.mairie.ptg.domain;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import nc.noumea.mairie.ptg.domain.EtatPayeur;
import org.springframework.transaction.annotation.Transactional;

privileged aspect EtatPayeur_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext(unitName = "ptgPersistenceUnit")
    transient EntityManager EtatPayeur.entityManager;
    
    public static final EntityManager EtatPayeur.entityManager() {
        EntityManager em = new EtatPayeur().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long EtatPayeur.countEtatPayeurs() {
        return entityManager().createQuery("SELECT COUNT(o) FROM EtatPayeur o", Long.class).getSingleResult();
    }
    
    public static List<EtatPayeur> EtatPayeur.findAllEtatPayeurs() {
        return entityManager().createQuery("SELECT o FROM EtatPayeur o", EtatPayeur.class).getResultList();
    }
    
    public static EtatPayeur EtatPayeur.findEtatPayeur(Integer idEtatPayeur_) {
        if (idEtatPayeur_ == null) return null;
        return entityManager().find(EtatPayeur.class, idEtatPayeur_);
    }
    
    public static List<EtatPayeur> EtatPayeur.findEtatPayeurEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM EtatPayeur o", EtatPayeur.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void EtatPayeur.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void EtatPayeur.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            EtatPayeur attached = EtatPayeur.findEtatPayeur(this.idEtatPayeur_);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void EtatPayeur.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void EtatPayeur.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public EtatPayeur EtatPayeur.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        EtatPayeur merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
