// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nc.noumea.mairie.ptg.domain;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import nc.noumea.mairie.ptg.domain.DroitsAgent;
import org.springframework.transaction.annotation.Transactional;

privileged aspect DroitsAgent_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext(unitName = "ptgPersistenceUnit")
    transient EntityManager DroitsAgent.entityManager;
    
    public static final EntityManager DroitsAgent.entityManager() {
        EntityManager em = new DroitsAgent().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long DroitsAgent.countDroitsAgents() {
        return entityManager().createQuery("SELECT COUNT(o) FROM DroitsAgent o", Long.class).getSingleResult();
    }
    
    public static List<DroitsAgent> DroitsAgent.findAllDroitsAgents() {
        return entityManager().createQuery("SELECT o FROM DroitsAgent o", DroitsAgent.class).getResultList();
    }
    
    public static DroitsAgent DroitsAgent.findDroitsAgent(Integer idDroitsAgent) {
        if (idDroitsAgent == null) return null;
        return entityManager().find(DroitsAgent.class, idDroitsAgent);
    }
    
    public static List<DroitsAgent> DroitsAgent.findDroitsAgentEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM DroitsAgent o", DroitsAgent.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void DroitsAgent.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void DroitsAgent.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            DroitsAgent attached = DroitsAgent.findDroitsAgent(this.idDroitsAgent);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void DroitsAgent.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void DroitsAgent.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public DroitsAgent DroitsAgent.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        DroitsAgent merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
