// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nc.noumea.mairie.ptg.domain;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import nc.noumea.mairie.ptg.domain.DroitsProfil;
import org.springframework.transaction.annotation.Transactional;

privileged aspect DroitsProfil_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext(unitName = "ptgPersistenceUnit")
    transient EntityManager DroitsProfil.entityManager;
    
    public static final EntityManager DroitsProfil.entityManager() {
        EntityManager em = new DroitsProfil().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long DroitsProfil.countDroitsProfils() {
        return entityManager().createQuery("SELECT COUNT(o) FROM DroitsProfil o", Long.class).getSingleResult();
    }
    
    public static List<DroitsProfil> DroitsProfil.findAllDroitsProfils() {
        return entityManager().createQuery("SELECT o FROM DroitsProfil o", DroitsProfil.class).getResultList();
    }
    
    public static DroitsProfil DroitsProfil.findDroitsProfil(Integer idDroitsProfil) {
        if (idDroitsProfil == null) return null;
        return entityManager().find(DroitsProfil.class, idDroitsProfil);
    }
    
    public static List<DroitsProfil> DroitsProfil.findDroitsProfilEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM DroitsProfil o", DroitsProfil.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void DroitsProfil.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void DroitsProfil.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            DroitsProfil attached = DroitsProfil.findDroitsProfil(this.idDroitsProfil);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void DroitsProfil.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void DroitsProfil.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public DroitsProfil DroitsProfil.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        DroitsProfil merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
