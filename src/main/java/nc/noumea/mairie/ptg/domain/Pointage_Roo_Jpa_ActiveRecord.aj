// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nc.noumea.mairie.ptg.domain;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import nc.noumea.mairie.ptg.domain.Pointage;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Pointage_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext(unitName = "ptgPersistenceUnit")
    transient EntityManager Pointage.entityManager;
    
    public static final List<String> Pointage.fieldNames4OrderClauseFilter = java.util.Arrays.asList("idPointage", "idAgent", "type", "etats", "dateLundi", "dateDebut", "dateFin", "quantite", "pointageParent", "refPrime", "heureSupRecuperee", "absenceConcertee", "motif", "commentaire", "ventilations");
    
    public static final EntityManager Pointage.entityManager() {
        EntityManager em = new Pointage().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Pointage.countPointages() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Pointage o", Long.class).getSingleResult();
    }
    
    public static List<Pointage> Pointage.findAllPointages() {
        return entityManager().createQuery("SELECT o FROM Pointage o", Pointage.class).getResultList();
    }
    
    public static List<Pointage> Pointage.findAllPointages(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Pointage o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Pointage.class).getResultList();
    }
    
    public static Pointage Pointage.findPointage(Integer idPointage) {
        if (idPointage == null) return null;
        return entityManager().find(Pointage.class, idPointage);
    }
    
    public static List<Pointage> Pointage.findPointageEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Pointage o", Pointage.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<Pointage> Pointage.findPointageEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Pointage o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Pointage.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Pointage.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Pointage.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Pointage attached = Pointage.findPointage(this.idPointage);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Pointage.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Pointage.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Pointage Pointage.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Pointage merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
