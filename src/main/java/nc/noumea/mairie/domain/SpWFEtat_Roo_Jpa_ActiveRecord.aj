// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nc.noumea.mairie.domain;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import nc.noumea.mairie.domain.SpWFEtat;
import nc.noumea.mairie.domain.SpWfEtatEnum;
import org.springframework.transaction.annotation.Transactional;

privileged aspect SpWFEtat_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext(unitName = "sirhPersistenceUnit")
    transient EntityManager SpWFEtat.entityManager;
    
    public static final EntityManager SpWFEtat.entityManager() {
        EntityManager em = new SpWFEtat().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long SpWFEtat.countSpWFEtats() {
        return entityManager().createQuery("SELECT COUNT(o) FROM SpWFEtat o", Long.class).getSingleResult();
    }
    
    public static List<SpWFEtat> SpWFEtat.findAllSpWFEtats() {
        return entityManager().createQuery("SELECT o FROM SpWFEtat o", SpWFEtat.class).getResultList();
    }
    
    public static SpWFEtat SpWFEtat.findSpWFEtat(SpWfEtatEnum codeEtat) {
        if (codeEtat == null) return null;
        return entityManager().find(SpWFEtat.class, codeEtat);
    }
    
    public static List<SpWFEtat> SpWFEtat.findSpWFEtatEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM SpWFEtat o", SpWFEtat.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void SpWFEtat.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void SpWFEtat.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            SpWFEtat attached = SpWFEtat.findSpWFEtat(this.codeEtat);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void SpWFEtat.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void SpWFEtat.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public SpWFEtat SpWFEtat.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        SpWFEtat merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
